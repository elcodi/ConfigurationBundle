imports:
    - { resource: parameters.yml }

framework:
    test:            ~
    session:
        storage_id: session.storage.mock_file
    secret:          "%secret%"
    router:
        resource: ~
    form:            true
    default_locale:  "%locale%"
    templating:      { engines: ['php'] }

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        path:     "%database_path%"
        memory:   "%database_memory%"
        charset:  UTF8
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        metadata_cache_driver: array
        query_cache_driver: array
        result_cache_driver: array
        auto_mapping: false

doctrine_cache:
    providers:
        elcodi_configurations:
            type: array
            namespace: configuration

parameters:
    my_parameter: my_parameter_value
    my_boolean_parameter: true

elcodi_configuration:
    elements:
        my_parameter:
            key: my_parameter
            name: My Parameter
            type: string
            reference: my_parameter
        my_boolean_parameter:
            key: my_boolean_parameter
            namespace: app
            name: My Boolean Parameter
            type: boolean
            reference: my_boolean_parameter

services:
    my_class_parameter:
        class: Elcodi\Bundle\ConfigurationBundle\Tests\Functional\Fixtures\MyClass
        arguments:
            my_parameter: @=service("elcodi.configuration_manager").getParameter("my_parameter")

    my_class_parameter_boolean:
        class: Elcodi\Bundle\ConfigurationBundle\Tests\Functional\Fixtures\MyClass
        arguments:
            my_parameter: @=service("elcodi.configuration_manager").getParameter("app.my_boolean_parameter")

    my_class_non_existing_parameter:
        class: Elcodi\Bundle\ConfigurationBundle\Tests\Functional\Fixtures\MyClass
        arguments:
            my_parameter: @=service("elcodi.configuration_manager").getParameter("my_non_existing_parameter")
